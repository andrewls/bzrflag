
class Point

def ccw(A,B,C):
    return (C.y-A.y) * (B.x-A.x) > (B.y-A.y) * (C.x-A.x)

# Return true if line segments AB and CD intersect
def intersect(A,B,C,D):
    return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)


def crappity_graphity(start, end, obstacles):
  nodes = []
  for obstacle in obstacles:
    for corner in obstacle:
      nodes.append(new Point(corner))

  for node in nodes:
    for node2 in nodes:
      if node == node2:
        continue
      else:
        make connection between nodes

  for edge in edges:
    delete edge if it passes through obstacle

  run algorithm of choice - depth first, breadth first, or a*
  return ordered list of all points that the robot needs to visit
